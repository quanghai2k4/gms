#!/bin/bash

# Guest Management System (GMS) - Status Check
# H·ªá th·ªëng Qu·∫£n l√Ω Kh√°ch m·ªùi - Ki·ªÉm tra Tr·∫°ng th√°i
# ===============================================

echo "üìä KI·ªÇM TRA TR·∫†NG TH√ÅI GMS / GMS STATUS CHECK"
echo "=============================================="
echo ""

# Get current directory
GMS_ROOT=$(pwd)
FRONTEND_DIR="$GMS_ROOT/frontend"

# Check if server is running
echo "üîç Ki·ªÉm tra Backend Server / Checking Backend Server..."
if curl -s http://localhost:3000/api/stats > /dev/null 2>&1; then
    echo "‚úÖ Backend Server: ƒêANG CH·∫†Y / RUNNING"
    echo "   URL: http://localhost:3000"
    
    # Get and display stats
    echo ""
    echo "üìà TH·ªêNG K√ä HI·ªÜN T·∫†I / CURRENT STATISTICS:"
    curl -s http://localhost:3000/api/stats | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    if data['success']:
        stats = data['data']
        print(f'   üìä T·ªïng kh√°ch m·ªùi / Total guests: {stats[\"total_guests\"]}')
        print(f'   ‚úÖ ƒê√£ x√°c nh·∫≠n / Accepted: {stats[\"accepted\"]}')
        print(f'   ‚è≥ Ch·ªù ph·∫£n h·ªìi / Pending: {stats[\"pending\"]}')
        print(f'   ‚ùå T·ª´ ch·ªëi / Declined: {stats[\"declined\"]}')
        print(f'   üéØ ƒê√£ check-in / Checked in: {stats[\"checked_in\"]}')
        
        # Calculate percentages
        total = stats['total_guests']
        if total > 0:
            accept_rate = (stats['accepted'] / total) * 100
            checkin_rate = (stats['checked_in'] / total) * 100
            print(f'   üìä T·ª∑ l·ªá x√°c nh·∫≠n / Acceptance rate: {accept_rate:.1f}%')
            print(f'   üìä T·ª∑ l·ªá check-in / Check-in rate: {checkin_rate:.1f}%')
except Exception as e:
    print(f'   ‚ùå L·ªói ƒë·ªçc d·ªØ li·ªáu / Error reading data: {e}')
"
else
    echo "‚ùå Backend Server: KH√îNG HO·∫†T ƒê·ªòNG / NOT RUNNING"
    echo "   ƒê·ªÉ kh·ªüi ƒë·ªông / To start: ./start.sh"
fi

echo ""
echo "üìÅ KI·ªÇM TRA FILES / FILE CHECK:"
echo "================================"

# Check backend files
if [ -f "backend/server.js" ]; then
    echo "‚úÖ Backend server file: C√ì / EXISTS"
else
    echo "‚ùå Backend server file: THI·∫æU / MISSING"
fi

if [ -f "backend/gms.db" ]; then
    echo "‚úÖ Database file: C√ì / EXISTS"
else
    echo "‚ö†Ô∏è  Database file: THI·∫æU / MISSING (s·∫Ω t·ª± t·∫°o / will be created)"
fi

# Check frontend files
if [ -f "$FRONTEND_DIR/index.html" ]; then
    echo "‚úÖ Admin Dashboard: C√ì / EXISTS"
    echo "   URL: http://localhost:3000/"
else
    echo "‚ùå Admin Dashboard: THI·∫æU / MISSING"
fi

if [ -f "$FRONTEND_DIR/rsvp.html" ]; then
    echo "‚úÖ RSVP Page: C√ì / EXISTS"
    echo "   URL: http://localhost:3000/rsvp"
else
    echo "‚ùå RSVP Page: THI·∫æU / MISSING"
fi

if [ -f "$FRONTEND_DIR/checkin.html" ]; then
    echo "‚úÖ Check-in Page: C√ì / EXISTS"
    echo "   URL: http://localhost:3000/checkin"
else
    echo "‚ùå Check-in Page: THI·∫æU / MISSING"
fi

echo ""
echo "üîß TI·∫æN TR√åNH H·ªÜ TH·ªêNG / SYSTEM PROCESSES:"
echo "========================================"

# Check for running processes
SERVER_PID=$(pgrep -f "node server.js")
if [ ! -z "$SERVER_PID" ]; then
    echo "‚úÖ Node.js Server Process: PID $SERVER_PID"
else
    echo "‚ùå Node.js Server Process: KH√îNG T√åM TH·∫§Y / NOT FOUND"
fi

NPM_PID=$(pgrep -f "npm start")
if [ ! -z "$NPM_PID" ]; then
    echo "‚úÖ NPM Process: PID $NPM_PID"
else
    echo "‚ÑπÔ∏è  NPM Process: KH√îNG T√åM TH·∫§Y / NOT FOUND"
fi

echo ""
echo "üåê TH√îNG TIN TRUY C·∫¨P / ACCESS INFORMATION:"
echo "=========================================="
echo "Backend API: http://localhost:3000/api/"
echo "Admin Dashboard: http://localhost:3000/"
echo "RSVP Page: http://localhost:3000/rsvp"
echo "Check-in Page: http://localhost:3000/checkin"
echo ""
echo "üìã L·ªÜNH H·ªÆU √çCH / USEFUL COMMANDS:"
echo "================================"
echo "./start.sh    - Kh·ªüi ƒë·ªông h·ªá th·ªëng / Start system"
echo "./stop.sh     - D·ª´ng h·ªá th·ªëng / Stop system"
echo "./status.sh   - Ki·ªÉm tra tr·∫°ng th√°i / Check status"
echo "./test.sh     - Ch·∫°y test / Run tests"
echo ""