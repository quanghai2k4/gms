#!/bin/bash

# Guest Management System (GMS) - Unified Management Script
# H·ªá th·ªëng Qu·∫£n l√Ω Kh√°ch m·ªùi - Script Qu·∫£n l√Ω T·ªïng h·ª£p
# ========================================================

VERSION="1.0"
GMS_ROOT=$(pwd)
BACKEND_DIR="$GMS_ROOT/backend"
FRONTEND_DIR="$GMS_ROOT/frontend"

# Colors for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to display help
show_help() {
    clear
    echo -e "${BLUE}üéâ H·ªÜ TH·ªêNG QU·∫¢N L√ù KH√ÅCH M·ªúI (GMS) v${VERSION}${NC}"
    echo -e "${BLUE}Guest Management System for 15th Anniversary Event${NC}"
    echo "======================================================="
    echo ""
    echo -e "${YELLOW}C√ÅCH S·ª¨ D·ª§NG / USAGE:${NC}"
    echo "  ./gms.sh <command>"
    echo ""
    echo -e "${YELLOW}C√ÅC L·ªÜNH / COMMANDS:${NC}"
    echo "  start     - Kh·ªüi ƒë·ªông h·ªá th·ªëng / Start the system"
    echo "  stop      - D·ª´ng h·ªá th·ªëng / Stop the system"
    echo "  status    - Ki·ªÉm tra tr·∫°ng th√°i / Check system status"
    echo "  test      - Ch·∫°y test h·ªá th·ªëng / Run system tests"
    echo "  restart   - Kh·ªüi ƒë·ªông l·∫°i / Restart system"
    echo "  help      - Hi·ªán h∆∞·ªõng d·∫´n n√†y / Show this help"
    echo ""
    echo -e "${YELLOW}V√ç D·ª§ / EXAMPLES:${NC}"
    echo "  ./gms.sh start"
    echo "  ./gms.sh status"
    echo "  ./gms.sh stop"
    echo ""
}

# Function to start the system
start_system() {
    clear
    echo -e "${BLUE}üéâ H·ªÜ TH·ªêNG QU·∫¢N L√ù KH√ÅCH M·ªúI (GMS)${NC}"
    echo -e "${BLUE}Guest Management System for 15th Anniversary Event${NC}"
    echo "=================================================="
    echo ""
    
    # System information
    echo -e "${YELLOW}üìã TH√îNG TIN H·ªÜ TH·ªêNG / SYSTEM INFORMATION:${NC}"
    echo "   Phi√™n b·∫£n / Version: v${VERSION}"
    echo "   Ng√†y t·∫°o / Created: $(date '+%Y-%m-%d %H:%M:%S')"
    echo "   Th∆∞ m·ª•c g·ªëc / Root Directory: $GMS_ROOT"
    echo ""
    
    # Check if Node.js is installed
    if ! command -v node &> /dev/null; then
        echo -e "${RED}‚ùå L·ªói: Node.js ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t / Error: Node.js not installed${NC}"
        echo "   T·∫£i v·ªÅ t·ª´ / Download from: https://nodejs.org/"
        echo "   Phi√™n b·∫£n y√™u c·∫ßu / Required version: Node.js 14+"
        exit 1
    fi
    
    # Display Node.js version
    NODE_VERSION=$(node --version)
    echo -e "${GREEN}‚úÖ Node.js: $NODE_VERSION${NC}"
    
    # Check directories
    if [ ! -d "$BACKEND_DIR" ] || [ ! -d "$FRONTEND_DIR" ]; then
        echo -e "${RED}‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c c·∫ßn thi·∫øt / Error: Required directories not found${NC}"
        exit 1
    fi
    
    # Navigate to backend directory
    cd "$BACKEND_DIR"
    
    # Check if node_modules exists
    if [ ! -d "node_modules" ]; then
        echo ""
        echo -e "${YELLOW}üì¶ ƒêang c√†i ƒë·∫∑t dependencies / Installing dependencies...${NC}"
        npm install
        if [ $? -ne 0 ]; then
            echo -e "${RED}‚ùå L·ªói c√†i ƒë·∫∑t dependencies / Failed to install dependencies${NC}"
            exit 1
        fi
        echo -e "${GREEN}‚úÖ Dependencies ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t / Dependencies installed successfully${NC}"
    fi
    
    # Check if database exists
    if [ ! -f "gms.db" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  C·∫£nh b√°o: Database ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o / Warning: Database not initialized${NC}"
        echo "   H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t·∫°o database khi kh·ªüi ƒë·ªông / System will create database on startup"
    fi
    
    echo ""
    echo -e "${YELLOW}üöÄ ƒêANG KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG / STARTING SYSTEM...${NC}"
    echo ""
    
    # Start the server in background to get PID
    npm start &
    SERVER_PID=$!
    
    # Wait a moment for server to start
    sleep 2
    
    # Check if server started successfully
    if kill -0 $SERVER_PID 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Backend server ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng / Backend server started successfully${NC}"
        echo ""
        
        show_access_info
        
        echo -e "${BLUE}üéØ Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng server / Press Ctrl+C to stop server${NC}"
        echo "=================================================="
        echo ""
        
        # Wait for the server process
        wait $SERVER_PID
    else
        echo -e "${RED}‚ùå L·ªói: Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông server / Error: Failed to start server${NC}"
        exit 1
    fi
}

# Function to show access information
show_access_info() {
    echo -e "${BLUE}üåê TH√îNG TIN TRUY C·∫¨P / ACCESS INFORMATION:${NC}"
    echo "=================================================="
    echo ""
    
    echo -e "${YELLOW}üîß API BACKEND:${NC}"
    echo "   URL: http://localhost:3000"
    echo "   Health Check: http://localhost:3000/api/stats"
    echo "   API Documentation: Xem t√†i li·ªáu trong docs/v1.0/api.md"
    echo ""
    
    echo -e "${YELLOW}üíª GIAO DI·ªÜN QU·∫¢N TR·ªä / ADMIN DASHBOARD:${NC}"
    echo "   URL: http://localhost:3000/"
    echo "   Alternative: http://localhost:3000/admin"
    echo "   Ch·ª©c nƒÉng: Qu·∫£n l√Ω kh√°ch m·ªùi, import CSV, t·∫°o QR code"
    echo "   Function: Guest management, CSV import, QR generation"
    echo ""
    
    echo -e "${YELLOW}üì± TRANG RSVP CHO KH√ÅCH / GUEST RSVP PAGE:${NC}"
    echo "   URL: http://localhost:3000/rsvp"
    echo "   URL c√≥ QR: http://localhost:3000/rsvp?qr=[QR_CODE]"
    echo "   Ch·ª©c nƒÉng: Kh√°ch m·ªùi x√°c nh·∫≠n tham d·ª±"
    echo "   Function: Guest invitation response"
    echo ""
    
    echo -e "${YELLOW}üéØ GIAO DI·ªÜN CHECK-IN / CHECK-IN INTERFACE:${NC}"
    echo "   URL: http://localhost:3000/checkin"
    echo "   Ch·ª©c nƒÉng: Qu√©t QR code trong ng√†y s·ª± ki·ªán"
    echo "   Function: QR code scanning on event day"
    echo ""
    
    echo -e "${YELLOW}üìÅ T√ÄI LI·ªÜU H·ªÜ TH·ªêNG / SYSTEM DOCUMENTATION:${NC}"
    echo "   Business Analysis: $GMS_ROOT/docs/v1.0/business-analysis.md"
    echo "   Architecture: $GMS_ROOT/docs/v1.0/architecture-4c.md"
    echo "   API Documentation: $GMS_ROOT/docs/v1.0/api.md"
    echo "   Test Cases: $GMS_ROOT/docs/v1.0/test-cases.md"
    echo "   Operation Guide: $GMS_ROOT/docs/v1.0/operation-guide.md"
    echo "   User Guide: $GMS_ROOT/docs/v1.0/user-guide.md"
    echo ""
    
    echo -e "${YELLOW}‚öôÔ∏è H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG / USAGE INSTRUCTIONS:${NC}"
    echo "=================================================="
    echo "1. M·ªü Admin Dashboard ƒë·ªÉ qu·∫£n l√Ω kh√°ch m·ªùi"
    echo "   Open Admin Dashboard for guest management"
    echo "2. Import danh s√°ch kh√°ch t·ª´ file CSV"
    echo "   Import guest list from CSV file"
    echo "3. T·∫°o v√† g·ª≠i QR code cho kh√°ch m·ªùi"
    echo "   Generate and send QR codes to guests"
    echo "4. Kh√°ch truy c·∫≠p RSVP page ƒë·ªÉ x√°c nh·∫≠n"
    echo "   Guests access RSVP page to confirm attendance"
    echo "5. S·ª≠ d·ª•ng Check-in interface trong ng√†y s·ª± ki·ªán"
    echo "   Use Check-in interface on event day"
    echo ""
    
    echo -e "${YELLOW}üõ†Ô∏è L·ªÜNH H·ªÆU √çCH / USEFUL COMMANDS:${NC}"
    echo "   Test h·ªá th·ªëng: ./gms.sh test"
    echo "   D·ª´ng server: ./gms.sh stop ho·∫∑c Ctrl+C"
    echo "   Ki·ªÉm tra tr·∫°ng th√°i: ./gms.sh status"
    echo ""
    
    echo -e "${YELLOW}üìä TR·∫†NG TH√ÅI HI·ªÜN T·∫†I / CURRENT STATUS:${NC}"
    # Try to get current stats
    if curl -s http://localhost:3000/api/stats > /dev/null 2>&1; then
        curl -s http://localhost:3000/api/stats | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    if data['success']:
        stats = data['data']
        print(f'   ‚úÖ T·ªïng kh√°ch m·ªùi / Total guests: {stats[\"total_guests\"]}')
        print(f'   ‚úÖ ƒê√£ x√°c nh·∫≠n / Accepted: {stats[\"accepted\"]}')
        print(f'   ‚è≥ Ch·ªù ph·∫£n h·ªìi / Pending: {stats[\"pending\"]}')
        print(f'   ‚ùå T·ª´ ch·ªëi / Declined: {stats[\"declined\"]}')
        print(f'   üéØ ƒê√£ check-in / Checked in: {stats[\"checked_in\"]}')
    else:
        print('   ‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ / Cannot get stats')
except:
    print('   ‚ö†Ô∏è L·ªói khi ƒë·ªçc d·ªØ li·ªáu / Error reading data')
"
    else
        echo "   ‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi API / Cannot connect to API"
    fi
    echo ""
    
    echo -e "${YELLOW}üö® L∆ØU √ù QUAN TR·ªåNG / IMPORTANT NOTES:${NC}"
    echo "=================================================="
    echo "‚Ä¢ T·∫•t c·∫£ giao di·ªán ƒë·ªÅu ch·∫°y tr√™n localhost:3000"
    echo "  All interfaces run on localhost:3000"
    echo "‚Ä¢ Ch·ªâ c·∫ßn m·ªü tr√¨nh duy·ªát v√† truy c·∫≠p URL localhost"
    echo "  Simply open browser and access localhost URLs"
    echo "‚Ä¢ Backend v√† Frontend ƒë·ªÅu ch·∫°y t·ª´ m·ªôt server duy nh·∫•t"
    echo "  Both Backend and Frontend run from single server"
    echo "‚Ä¢ D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u trong file backend/gms.db"
    echo "  Data is stored in backend/gms.db file"
    echo "‚Ä¢ Backup d·ªØ li·ªáu th∆∞·ªùng xuy√™n"
    echo "  Backup data regularly"
    echo ""
}

# Function to stop the system
stop_system() {
    echo -e "${RED}üõë ƒêANG D·ª™NG H·ªÜ TH·ªêNG GMS / STOPPING GMS SYSTEM${NC}"
    echo "================================================"
    echo ""
    
    # Find and kill Node.js processes related to GMS
    echo -e "${YELLOW}üîç T√¨m ki·∫øm ti·∫øn tr√¨nh GMS / Finding GMS processes...${NC}"
    
    # Check for server.js process
    SERVER_PID=$(pgrep -f "node server.js")
    if [ ! -z "$SERVER_PID" ]; then
        echo "   T√¨m th·∫•y server process PID: $SERVER_PID"
        echo "   Found server process PID: $SERVER_PID"
        
        # Try graceful shutdown first
        echo -e "${YELLOW}ü§ù Th·ª≠ d·ª´ng nh·∫π nh√†ng / Attempting graceful shutdown...${NC}"
        kill -TERM $SERVER_PID
        
        # Wait a moment
        sleep 3
        
        # Check if still running
        if kill -0 $SERVER_PID 2>/dev/null; then
            echo -e "${YELLOW}‚ö° Bu·ªôc d·ª´ng process / Force killing process...${NC}"
            kill -KILL $SERVER_PID
            sleep 1
        fi
        
        # Verify it's stopped
        if kill -0 $SERVER_PID 2>/dev/null; then
            echo -e "${RED}‚ùå Kh√¥ng th·ªÉ d·ª´ng process / Failed to stop process${NC}"
            exit 1
        else
            echo -e "${GREEN}‚úÖ Server ƒë√£ d·ª´ng / Server stopped successfully${NC}"
        fi
    else
        echo -e "${BLUE}‚ÑπÔ∏è  Kh√¥ng t√¨m th·∫•y server process / No server process found${NC}"
    fi
    
    # Also check for any npm processes
    NPM_PID=$(pgrep -f "npm start")
    if [ ! -z "$NPM_PID" ]; then
        echo "   D·ª´ng npm process PID: $NPM_PID"
        echo "   Stopping npm process PID: $NPM_PID"
        kill -KILL $NPM_PID
    fi
    
    # Verify port 3000 is free
    echo ""
    echo -e "${YELLOW}üîç Ki·ªÉm tra port 3000 / Checking port 3000...${NC}"
    if curl -s http://localhost:3000 > /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  C·∫£nh b√°o: Port 3000 v·∫´n ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng${NC}"
        echo "   Warning: Port 3000 still in use"
        echo "   C√≥ th·ªÉ c√≥ process kh√°c ƒëang ch·∫°y tr√™n port n√†y"
        echo "   There might be another process running on this port"
    else
        echo -e "${GREEN}‚úÖ Port 3000 ƒë√£ ƒë∆∞·ª£c gi·∫£i ph√≥ng / Port 3000 is now free${NC}"
    fi
    
    echo ""
    echo -e "${BLUE}üéØ T√åNH TR·∫†NG / STATUS:${NC}"
    echo "========================"
    echo -e "${GREEN}‚úÖ GMS System ƒë√£ d·ª´ng ho√†n to√†n / GMS System fully stopped${NC}"
    echo -e "${GREEN}‚úÖ Backend API kh√¥ng c√≤n ho·∫°t ƒë·ªông / Backend API no longer active${NC}"
    echo -e "${GREEN}‚úÖ Port 3000 ƒë√£ ƒë∆∞·ª£c gi·∫£i ph√≥ng / Port 3000 freed${NC}"
    echo ""
    echo -e "${YELLOW}üîÑ ƒê·ªÉ kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng / To restart the system:${NC}"
    echo "   ./gms.sh start"
    echo ""
    echo -e "${YELLOW}üìä ƒê·ªÉ ki·ªÉm tra tr·∫°ng th√°i / To check status:${NC}"
    echo "   ./gms.sh status"
    echo ""
}

# Function to check system status
check_status() {
    echo -e "${BLUE}üìä KI·ªÇM TRA TR·∫†NG TH√ÅI GMS / GMS STATUS CHECK${NC}"
    echo "=============================================="
    echo ""
    
    # Check if server is running
    echo -e "${YELLOW}üîç Ki·ªÉm tra Backend Server / Checking Backend Server...${NC}"
    if curl -s http://localhost:3000/api/stats > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Backend Server: ƒêANG CH·∫†Y / RUNNING${NC}"
        echo "   URL: http://localhost:3000"
        
        # Get and display stats
        echo ""
        echo -e "${YELLOW}üìà TH·ªêNG K√ä HI·ªÜN T·∫†I / CURRENT STATISTICS:${NC}"
        curl -s http://localhost:3000/api/stats | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    if data['success']:
        stats = data['data']
        print(f'   üìä T·ªïng kh√°ch m·ªùi / Total guests: {stats[\"total_guests\"]}')
        print(f'   ‚úÖ ƒê√£ x√°c nh·∫≠n / Accepted: {stats[\"accepted\"]}')
        print(f'   ‚è≥ Ch·ªù ph·∫£n h·ªìi / Pending: {stats[\"pending\"]}')
        print(f'   ‚ùå T·ª´ ch·ªëi / Declined: {stats[\"declined\"]}')
        print(f'   üéØ ƒê√£ check-in / Checked in: {stats[\"checked_in\"]}')
        
        # Calculate percentages
        total = stats['total_guests']
        if total > 0:
            accept_rate = (stats['accepted'] / total) * 100
            checkin_rate = (stats['checked_in'] / total) * 100
            print(f'   üìä T·ª∑ l·ªá x√°c nh·∫≠n / Acceptance rate: {accept_rate:.1f}%')
            print(f'   üìä T·ª∑ l·ªá check-in / Check-in rate: {checkin_rate:.1f}%')
except Exception as e:
    print(f'   ‚ùå L·ªói ƒë·ªçc d·ªØ li·ªáu / Error reading data: {e}')
"
    else
        echo -e "${RED}‚ùå Backend Server: KH√îNG HO·∫†T ƒê·ªòNG / NOT RUNNING${NC}"
        echo "   ƒê·ªÉ kh·ªüi ƒë·ªông / To start: ./gms.sh start"
    fi
    
    echo ""
    echo -e "${YELLOW}üìÅ KI·ªÇM TRA FILES / FILE CHECK:${NC}"
    echo "================================"
    
    # Check backend files
    if [ -f "backend/server.js" ]; then
        echo -e "${GREEN}‚úÖ Backend server file: C√ì / EXISTS${NC}"
    else
        echo -e "${RED}‚ùå Backend server file: THI·∫æU / MISSING${NC}"
    fi
    
    if [ -f "backend/gms.db" ]; then
        echo -e "${GREEN}‚úÖ Database file: C√ì / EXISTS${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Database file: THI·∫æU / MISSING (s·∫Ω t·ª± t·∫°o / will be created)${NC}"
    fi
    
    # Check frontend files
    if [ -f "$FRONTEND_DIR/index.html" ]; then
        echo -e "${GREEN}‚úÖ Admin Dashboard: C√ì / EXISTS${NC}"
        echo "   URL: http://localhost:3000/"
    else
        echo -e "${RED}‚ùå Admin Dashboard: THI·∫æU / MISSING${NC}"
    fi
    
    if [ -f "$FRONTEND_DIR/rsvp.html" ]; then
        echo -e "${GREEN}‚úÖ RSVP Page: C√ì / EXISTS${NC}"
        echo "   URL: http://localhost:3000/rsvp"
    else
        echo -e "${RED}‚ùå RSVP Page: THI·∫æU / MISSING${NC}"
    fi
    
    if [ -f "$FRONTEND_DIR/checkin.html" ]; then
        echo -e "${GREEN}‚úÖ Check-in Page: C√ì / EXISTS${NC}"
        echo "   URL: http://localhost:3000/checkin"
    else
        echo -e "${RED}‚ùå Check-in Page: THI·∫æU / MISSING${NC}"
    fi
    
    echo ""
    echo -e "${YELLOW}üîß TI·∫æN TR√åNH H·ªÜ TH·ªêNG / SYSTEM PROCESSES:${NC}"
    echo "========================================"
    
    # Check for running processes
    SERVER_PID=$(pgrep -f "node server.js")
    if [ ! -z "$SERVER_PID" ]; then
        echo -e "${GREEN}‚úÖ Node.js Server Process: PID $SERVER_PID${NC}"
    else
        echo -e "${RED}‚ùå Node.js Server Process: KH√îNG T√åM TH·∫§Y / NOT FOUND${NC}"
    fi
    
    NPM_PID=$(pgrep -f "npm start")
    if [ ! -z "$NPM_PID" ]; then
        echo -e "${GREEN}‚úÖ NPM Process: PID $NPM_PID${NC}"
    else
        echo -e "${BLUE}‚ÑπÔ∏è  NPM Process: KH√îNG T√åM TH·∫§Y / NOT FOUND${NC}"
    fi
    
    echo ""
    echo -e "${YELLOW}üåê TH√îNG TIN TRUY C·∫¨P / ACCESS INFORMATION:${NC}"
    echo "=========================================="
    echo "Backend API: http://localhost:3000/api/"
    echo "Admin Dashboard: http://localhost:3000/"
    echo "RSVP Page: http://localhost:3000/rsvp"
    echo "Check-in Page: http://localhost:3000/checkin"
    echo ""
    echo -e "${YELLOW}üìã L·ªÜNH H·ªÆU √çCH / USEFUL COMMANDS:${NC}"
    echo "================================"
    echo "./gms.sh start    - Kh·ªüi ƒë·ªông h·ªá th·ªëng / Start system"
    echo "./gms.sh stop     - D·ª´ng h·ªá th·ªëng / Stop system"
    echo "./gms.sh status   - Ki·ªÉm tra tr·∫°ng th√°i / Check status"
    echo "./gms.sh test     - Ch·∫°y test / Run tests"
    echo ""
}

# Function to run tests
run_tests() {
    echo -e "${BLUE}üß™ Testing Guest Management System${NC}"
    echo "=================================="
    
    # Start server in background
    cd "$BACKEND_DIR"
    node server.js &
    SERVER_PID=$!
    
    # Wait for server to start
    echo -e "${YELLOW}‚è≥ Starting server...${NC}"
    sleep 3
    
    echo -e "${GREEN}‚úÖ Server started at http://localhost:3000${NC}"
    echo ""
    
    # Test API endpoints
    echo -e "${YELLOW}üìã Testing API endpoints:${NC}"
    echo ""
    
    # 1. Check initial stats
    echo -e "${BLUE}1Ô∏è‚É£ Initial stats:${NC}"
    curl -s http://localhost:3000/api/stats | python3 -m json.tool
    echo ""
    
    # 2. Add a guest
    echo -e "${BLUE}2Ô∏è‚É£ Adding a guest:${NC}"
    RESPONSE=$(curl -s -X POST http://localhost:3000/api/guests \
      -H "Content-Type: application/json" \
      -d '{"name":"Nguy·ªÖn VƒÉn Demo","position":"Gi√°m ƒë·ªëc","organization":"C√¥ng ty Demo","phone":"0123456789"}')
    echo $RESPONSE | python3 -m json.tool
    echo ""
    
    # Extract QR code from response
    QR_CODE=$(echo $RESPONSE | python3 -c "import sys, json; print(json.load(sys.stdin)['data']['qr_code'])")
    echo -e "${YELLOW}üì± QR Code: $QR_CODE${NC}"
    echo ""
    
    # 3. Test RSVP
    echo -e "${BLUE}3Ô∏è‚É£ Guest accepts invitation:${NC}"
    curl -s -X POST http://localhost:3000/api/rsvp \
      -H "Content-Type: application/json" \
      -d "{\"qr_code\":\"$QR_CODE\",\"response\":\"ACCEPTED\"}" | python3 -m json.tool
    echo ""
    
    # 4. Test check-in
    echo -e "${BLUE}4Ô∏è‚É£ Check-in guest:${NC}"
    curl -s -X POST http://localhost:3000/api/checkin \
      -H "Content-Type: application/json" \
      -d "{\"qr_code\":\"$QR_CODE\",\"checkin_by\":\"Test Admin\"}" | python3 -m json.tool
    echo ""
    
    # 5. Final stats
    echo -e "${BLUE}5Ô∏è‚É£ Final stats:${NC}"
    curl -s http://localhost:3000/api/stats | python3 -m json.tool
    echo ""
    
    echo -e "${GREEN}‚úÖ All tests passed!${NC}"
    echo ""
    echo -e "${YELLOW}üåê Access points:${NC}"
    echo "   ‚Ä¢ Admin Dashboard: http://localhost:3000/"
    echo "   ‚Ä¢ RSVP Page: http://localhost:3000/rsvp?qr=$QR_CODE"
    echo "   ‚Ä¢ Check-in Page: http://localhost:3000/checkin"
    echo "   ‚Ä¢ Backend API: http://localhost:3000"
    echo ""
    echo -e "${RED}üõë Press Ctrl+C to stop the server${NC}"
    echo ""
    
    # Keep server running
    wait $SERVER_PID
}

# Function to restart system
restart_system() {
    echo -e "${YELLOW}üîÑ KH·ªûI ƒê·ªòNG L·∫†I H·ªÜ TH·ªêNG / RESTARTING SYSTEM${NC}"
    echo "============================================="
    echo ""
    
    stop_system
    echo ""
    echo -e "${YELLOW}‚è≥ ƒê·ª£i 2 gi√¢y / Waiting 2 seconds...${NC}"
    sleep 2
    echo ""
    start_system
}

# Main script logic
case "${1:-}" in
    "start")
        start_system
        ;;
    "stop")
        stop_system
        ;;
    "status")
        check_status
        ;;
    "test")
        run_tests
        ;;
    "restart")
        restart_system
        ;;
    "help"|"--help"|"-h")
        show_help
        ;;
    "")
        echo -e "${RED}‚ùå Thi·∫øu l·ªánh / Missing command${NC}"
        echo ""
        show_help
        exit 1
        ;;
    *)
        echo -e "${RED}‚ùå L·ªánh kh√¥ng h·ª£p l·ªá: $1${NC}"
        echo -e "${RED}‚ùå Invalid command: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac